import os
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image as PlatypusImage
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.barcode import qr
from datetime import datetime
from io import BytesIO
import qrcode

def generate_medical_report(user_name, user_input, predictions, recommendations):
    """
    Generates a personalized, professional PDF medical report.
    """
    # --- Prepare directory and file name ---
    reports_dir = "reports"
    os.makedirs(reports_dir, exist_ok=True)
    file_name = f"{user_name.replace(' ', '_')}_medical_report_{datetime.now().strftime('%Y%m%d')}.pdf"
    file_path = os.path.join(reports_dir, file_name)

    # --- Create PDF document ---
    doc = SimpleDocTemplate(file_path, pagesize=A4)
    story = []

    # --- Styles ---
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle("TitleStyle", parent=styles["Title"], alignment=1, textColor=colors.HexColor("#007ACC"), fontSize=20)
    header_style = ParagraphStyle("HeaderStyle", parent=styles["Heading2"], textColor=colors.darkblue, spaceAfter=6)
    normal_style = ParagraphStyle("NormalStyle", parent=styles["Normal"], fontSize=12, leading=16)
    disclaimer_style = ParagraphStyle("DisclaimerStyle", parent=styles["Italic"], fontSize=10, textColor=colors.darkred, leading=14)

    # --- Header ---
    story.append(Paragraph("ðŸ©º AI Healthcare System - Diagnostic Report", title_style))
    story.append(Spacer(1, 12))
    story.append(Paragraph(f"<b>Date:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", normal_style))
    story.append(Paragraph(f"<b>Patient Name:</b> {user_name}", normal_style))
    story.append(Spacer(1, 20))
    story.append(Paragraph("<b>Reported Symptoms:</b>", header_style))
    story.append(Paragraph(user_input, normal_style))
    story.append(Spacer(1, 20))

    # --- Predictions Table ---
    if predictions:
        story.append(Paragraph("<b>Preliminary Diagnosis:</b>", header_style))
        table_data = [["Condition", "Likelihood", "Recommended Tests", "Advice", "Specialist"]]
        for i, pred in enumerate(predictions):
            rec = recommendations[i]
            table_data.append([
                pred["disease"],
                f"{pred['probability']:.1%}",
                Paragraph(", ".join(rec.get("tests", [])), normal_style),
                Paragraph(rec.get("advice", "N/A"), normal_style),
                rec.get("specialist", "N/A")
            ])

        table = Table(table_data, colWidths=[90, 70, 110, 130, 90])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#007ACC")),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('BOX', (0, 0), (-1, -1), 1, colors.black),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(table)
    else:
        story.append(Paragraph("No conditions detected based on the provided symptoms.", normal_style))

    story.append(Spacer(1, 30))

    # --- Disclaimer ---
    disclaimer = "<b>Disclaimer:</b> This report is generated by an AI system and is for informational purposes only. It is not a substitute for professional medical diagnosis. Always consult a qualified healthcare provider."
    story.append(Paragraph(disclaimer, disclaimer_style))
    story.append(Spacer(1, 20))

    # --- QR Code ---
    project_url = "https://your-app-name.onrender.com"
    qr_code_img = qrcode.make(project_url)
    qr_buffer = BytesIO()
    qr_code_img.save(qr_buffer, format="PNG")
    qr_buffer.seek(0)
    
    story.append(Paragraph("<b>Access Online Chatbot:</b>", normal_style))
    story.append(PlatypusImage(qr_buffer, width=80, height=80))

    # --- Build PDF ---
    doc.build(story)
    return file_path
